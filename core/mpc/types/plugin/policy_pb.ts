// @generated by protoc-gen-es v2.7.0 with parameter "target=ts,json_types=true"
// @generated from file policy.proto (package types, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv2";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv2";
import type { StructJson, Timestamp, TimestampJson } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_struct, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Rule, RuleJson } from "./rule_pb";
import { file_rule } from "./rule_pb";
import type { JsonObject, Message } from "@bufbuild/protobuf";

/**
 * Describes the file policy.proto.
 */
export const file_policy: GenFile = /*@__PURE__*/
  fileDesc("Cgxwb2xpY3kucHJvdG8SBXR5cGVzIrYBCglGZWVQb2xpY3kSCgoCaWQYASABKAkSHAoEdHlwZRgCIAEoDjIOLnR5cGVzLkZlZVR5cGUSKgoJZnJlcXVlbmN5GAMgASgOMhcudHlwZXMuQmlsbGluZ0ZyZXF1ZW5jeRIOCgZhbW91bnQYBCABKAMSLgoKc3RhcnRfZGF0ZRgFIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASEwoLZGVzY3JpcHRpb24YBiABKAkimgMKBlBvbGljeRIKCgJpZBgBIAEoCRIMCgRuYW1lGAIgASgJEhMKC2Rlc2NyaXB0aW9uGAMgASgJEg8KB3ZlcnNpb24YBCABKAUSDgoGYXV0aG9yGAUgASgJEhoKBXJ1bGVzGAYgAygLMgsudHlwZXMuUnVsZRIuCgpjcmVhdGVkX2F0GAcgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIuCgp1cGRhdGVkX2F0GAggASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBImCgxmZWVfcG9saWNpZXMYCSADKAsyEC50eXBlcy5GZWVQb2xpY3kSLgoNY29uZmlndXJhdGlvbhgKIAEoCzIXLmdvb2dsZS5wcm90b2J1Zi5TdHJ1Y3QSHgoRcmF0ZV9saW1pdF93aW5kb3cYCyABKA1IAIgBARIfChJtYXhfdHhzX3Blcl93aW5kb3cYDCABKA1IAYgBAUIUChJfcmF0ZV9saW1pdF93aW5kb3dCFQoTX21heF90eHNfcGVyX3dpbmRvdyKZAQoNUG9saWN5U3VnZ2VzdBIeChFyYXRlX2xpbWl0X3dpbmRvdxgBIAEoDUgAiAEBEh8KEm1heF90eHNfcGVyX3dpbmRvdxgCIAEoDUgBiAEBEhoKBXJ1bGVzGAMgAygLMgsudHlwZXMuUnVsZUIUChJfcmF0ZV9saW1pdF93aW5kb3dCFQoTX21heF90eHNfcGVyX3dpbmRvdypNCgdGZWVUeXBlEhgKFEZFRV9UWVBFX1VOU1BFQ0lGSUVEEAASDQoJUkVDVVJSSU5HEAESCAoET05DRRACEg8KC1RSQU5TQUNUSU9OEAMqZwoQQmlsbGluZ0ZyZXF1ZW5jeRIhCh1CSUxMSU5HX0ZSRVFVRU5DWV9VTlNQRUNJRklFRBAAEgkKBURBSUxZEAESCgoGV0VFS0xZEAISDAoIQklXRUVLTFkQAxILCgdNT05USExZEARCI1ohZ2l0aHViLmNvbS92dWx0aXNpZy9yZWNpcGVzL3R5cGVzYgZwcm90bzM", [file_google_protobuf_struct, file_google_protobuf_timestamp, file_rule]);

/**
 * FeePolicy represents a single billing configuration
 *
 * @generated from message types.FeePolicy
 */
export type FeePolicy = Message<"types.FeePolicy"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: types.FeeType type = 2;
   */
  type: FeeType;

  /**
   * Frequency only applies to recurring types
   *
   * @generated from field: types.BillingFrequency frequency = 3;
   */
  frequency: BillingFrequency;

  /**
   * @generated from field: int64 amount = 4;
   */
  amount: bigint;

  /**
   * When billing starts (optional)
   *
   * @generated from field: google.protobuf.Timestamp start_date = 5;
   */
  startDate?: Timestamp;

  /**
   * Optional description
   *
   * @generated from field: string description = 6;
   */
  description: string;
};

/**
 * FeePolicy represents a single billing configuration
 *
 * @generated from message types.FeePolicy
 */
export type FeePolicyJson = {
  /**
   * @generated from field: string id = 1;
   */
  id?: string;

  /**
   * @generated from field: types.FeeType type = 2;
   */
  type?: FeeTypeJson;

  /**
   * Frequency only applies to recurring types
   *
   * @generated from field: types.BillingFrequency frequency = 3;
   */
  frequency?: BillingFrequencyJson;

  /**
   * @generated from field: int64 amount = 4;
   */
  amount?: string;

  /**
   * When billing starts (optional)
   *
   * @generated from field: google.protobuf.Timestamp start_date = 5;
   */
  startDate?: TimestampJson;

  /**
   * Optional description
   *
   * @generated from field: string description = 6;
   */
  description?: string;
};

/**
 * Describes the message types.FeePolicy.
 * Use `create(FeePolicySchema)` to create a new message.
 */
export const FeePolicySchema: GenMessage<FeePolicy, {jsonType: FeePolicyJson}> = /*@__PURE__*/
  messageDesc(file_policy, 0);

/**
 * Policy represents a set of rules that determine what a plugin is allowed to do
 *
 * @generated from message types.Policy
 */
export type Policy = Message<"types.Policy"> & {
  /**
   * ID is a unique identifier for the policy
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * Name is a human-readable name for the policy
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * Description provides details about what the policy allows
   *
   * @generated from field: string description = 3;
   */
  description: string;

  /**
   * Version is the policy version
   *
   * @generated from field: int32 version = 4;
   */
  version: number;

  /**
   * Author is the identifier of the plugin developer
   *
   * @generated from field: string author = 5;
   */
  author: string;

  /**
   * Rules is an ordered list of permission rules
   *
   * @generated from field: repeated types.Rule rules = 6;
   */
  rules: Rule[];

  /**
   * CreatedAt is when the policy was created
   *
   * @generated from field: google.protobuf.Timestamp created_at = 7;
   */
  createdAt?: Timestamp;

  /**
   * UpdatedAt is when the policy was last updated
   *
   * @generated from field: google.protobuf.Timestamp updated_at = 8;
   */
  updatedAt?: Timestamp;

  /**
   * FeePolicies defines the billing configuration for this policy
   *
   * @generated from field: repeated types.FeePolicy fee_policies = 9;
   */
  feePolicies: FeePolicy[];

  /**
   * Plugin configuration
   *
   * @generated from field: google.protobuf.Struct configuration = 10;
   */
  configuration?: JsonObject;

  /**
   * MinExecWindow defines minimum allowed gap in seconds between policy txs batch executed
   *
   * @generated from field: optional uint32 rate_limit_window = 11;
   */
  rateLimitWindow?: number;

  /**
   * MaxTxsPerWindow defines maximum txs count in batch, actually rules count in policy, for example:
   * set 1 for erc20.transfer
   * set 2 for erc20.approve + erc20.transferFrom
   *
   * @generated from field: optional uint32 max_txs_per_window = 12;
   */
  maxTxsPerWindow?: number;
};

/**
 * Policy represents a set of rules that determine what a plugin is allowed to do
 *
 * @generated from message types.Policy
 */
export type PolicyJson = {
  /**
   * ID is a unique identifier for the policy
   *
   * @generated from field: string id = 1;
   */
  id?: string;

  /**
   * Name is a human-readable name for the policy
   *
   * @generated from field: string name = 2;
   */
  name?: string;

  /**
   * Description provides details about what the policy allows
   *
   * @generated from field: string description = 3;
   */
  description?: string;

  /**
   * Version is the policy version
   *
   * @generated from field: int32 version = 4;
   */
  version?: number;

  /**
   * Author is the identifier of the plugin developer
   *
   * @generated from field: string author = 5;
   */
  author?: string;

  /**
   * Rules is an ordered list of permission rules
   *
   * @generated from field: repeated types.Rule rules = 6;
   */
  rules?: RuleJson[];

  /**
   * CreatedAt is when the policy was created
   *
   * @generated from field: google.protobuf.Timestamp created_at = 7;
   */
  createdAt?: TimestampJson;

  /**
   * UpdatedAt is when the policy was last updated
   *
   * @generated from field: google.protobuf.Timestamp updated_at = 8;
   */
  updatedAt?: TimestampJson;

  /**
   * FeePolicies defines the billing configuration for this policy
   *
   * @generated from field: repeated types.FeePolicy fee_policies = 9;
   */
  feePolicies?: FeePolicyJson[];

  /**
   * Plugin configuration
   *
   * @generated from field: google.protobuf.Struct configuration = 10;
   */
  configuration?: StructJson;

  /**
   * MinExecWindow defines minimum allowed gap in seconds between policy txs batch executed
   *
   * @generated from field: optional uint32 rate_limit_window = 11;
   */
  rateLimitWindow?: number;

  /**
   * MaxTxsPerWindow defines maximum txs count in batch, actually rules count in policy, for example:
   * set 1 for erc20.transfer
   * set 2 for erc20.approve + erc20.transferFrom
   *
   * @generated from field: optional uint32 max_txs_per_window = 12;
   */
  maxTxsPerWindow?: number;
};

/**
 * Describes the message types.Policy.
 * Use `create(PolicySchema)` to create a new message.
 */
export const PolicySchema: GenMessage<Policy, {jsonType: PolicyJson}> = /*@__PURE__*/
  messageDesc(file_policy, 1);

/**
 * @generated from message types.PolicySuggest
 */
export type PolicySuggest = Message<"types.PolicySuggest"> & {
  /**
   * @generated from field: optional uint32 rate_limit_window = 1;
   */
  rateLimitWindow?: number;

  /**
   * @generated from field: optional uint32 max_txs_per_window = 2;
   */
  maxTxsPerWindow?: number;

  /**
   * @generated from field: repeated types.Rule rules = 3;
   */
  rules: Rule[];
};

/**
 * @generated from message types.PolicySuggest
 */
export type PolicySuggestJson = {
  /**
   * @generated from field: optional uint32 rate_limit_window = 1;
   */
  rateLimitWindow?: number;

  /**
   * @generated from field: optional uint32 max_txs_per_window = 2;
   */
  maxTxsPerWindow?: number;

  /**
   * @generated from field: repeated types.Rule rules = 3;
   */
  rules?: RuleJson[];
};

/**
 * Describes the message types.PolicySuggest.
 * Use `create(PolicySuggestSchema)` to create a new message.
 */
export const PolicySuggestSchema: GenMessage<PolicySuggest, {jsonType: PolicySuggestJson}> = /*@__PURE__*/
  messageDesc(file_policy, 2);

/**
 * Enum representing fee types
 *
 * @generated from enum types.FeeType
 */
export enum FeeType {
  /**
   * @generated from enum value: FEE_TYPE_UNSPECIFIED = 0;
   */
  FEE_TYPE_UNSPECIFIED = 0,

  /**
   * @generated from enum value: RECURRING = 1;
   */
  RECURRING = 1,

  /**
   * @generated from enum value: ONCE = 2;
   */
  ONCE = 2,

  /**
   * @generated from enum value: TRANSACTION = 3;
   */
  TRANSACTION = 3,
}

/**
 * Enum representing fee types
 *
 * @generated from enum types.FeeType
 */
export type FeeTypeJson = "FEE_TYPE_UNSPECIFIED" | "RECURRING" | "ONCE" | "TRANSACTION";

/**
 * Describes the enum types.FeeType.
 */
export const FeeTypeSchema: GenEnum<FeeType, FeeTypeJson> = /*@__PURE__*/
  enumDesc(file_policy, 0);

/**
 * Enum representing billing frequency
 *
 * @generated from enum types.BillingFrequency
 */
export enum BillingFrequency {
  /**
   * @generated from enum value: BILLING_FREQUENCY_UNSPECIFIED = 0;
   */
  BILLING_FREQUENCY_UNSPECIFIED = 0,

  /**
   * @generated from enum value: DAILY = 1;
   */
  DAILY = 1,

  /**
   * @generated from enum value: WEEKLY = 2;
   */
  WEEKLY = 2,

  /**
   * @generated from enum value: BIWEEKLY = 3;
   */
  BIWEEKLY = 3,

  /**
   * @generated from enum value: MONTHLY = 4;
   */
  MONTHLY = 4,
}

/**
 * Enum representing billing frequency
 *
 * @generated from enum types.BillingFrequency
 */
export type BillingFrequencyJson = "BILLING_FREQUENCY_UNSPECIFIED" | "DAILY" | "WEEKLY" | "BIWEEKLY" | "MONTHLY";

/**
 * Describes the enum types.BillingFrequency.
 */
export const BillingFrequencySchema: GenEnum<BillingFrequency, BillingFrequencyJson> = /*@__PURE__*/
  enumDesc(file_policy, 1);

