// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file vultisig/keysign/v1/1inch_swap_payload.proto (package vultisig.keysign.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from '@bufbuild/protobuf';
import { Message, proto3, protoInt64 } from '@bufbuild/protobuf';
import { Coin } from './coin_pb.js';

/**
 * @generated from message vultisig.keysign.v1.OneInchTransaction
 */
export class OneInchTransaction extends Message<OneInchTransaction> {
  /**
   * @generated from field: string from = 1;
   */
  from = '';

  /**
   * @generated from field: string to = 2;
   */
  to = '';

  /**
   * @generated from field: string data = 3;
   */
  data = '';

  /**
   * @generated from field: string value = 4;
   */
  value = '';

  /**
   * @generated from field: string gas_price = 5;
   */
  gasPrice = '';

  /**
   * @generated from field: int64 gas = 6;
   */
  gas = protoInt64.zero;

  constructor(data?: PartialMessage<OneInchTransaction>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'vultisig.keysign.v1.OneInchTransaction';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'from', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'to', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'data', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 4, name: 'value', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 5, name: 'gas_price', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 6, name: 'gas', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): OneInchTransaction {
    return new OneInchTransaction().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): OneInchTransaction {
    return new OneInchTransaction().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): OneInchTransaction {
    return new OneInchTransaction().fromJsonString(jsonString, options);
  }

  static equals(
    a: OneInchTransaction | PlainMessage<OneInchTransaction> | undefined,
    b: OneInchTransaction | PlainMessage<OneInchTransaction> | undefined
  ): boolean {
    return proto3.util.equals(OneInchTransaction, a, b);
  }
}

/**
 * @generated from message vultisig.keysign.v1.OneInchQuote
 */
export class OneInchQuote extends Message<OneInchQuote> {
  /**
   * @generated from field: string dst_amount = 1;
   */
  dstAmount = '';

  /**
   * @generated from field: vultisig.keysign.v1.OneInchTransaction tx = 2;
   */
  tx?: OneInchTransaction;

  constructor(data?: PartialMessage<OneInchQuote>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'vultisig.keysign.v1.OneInchQuote';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'dst_amount', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'tx', kind: 'message', T: OneInchTransaction },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): OneInchQuote {
    return new OneInchQuote().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): OneInchQuote {
    return new OneInchQuote().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): OneInchQuote {
    return new OneInchQuote().fromJsonString(jsonString, options);
  }

  static equals(
    a: OneInchQuote | PlainMessage<OneInchQuote> | undefined,
    b: OneInchQuote | PlainMessage<OneInchQuote> | undefined
  ): boolean {
    return proto3.util.equals(OneInchQuote, a, b);
  }
}

/**
 * @generated from message vultisig.keysign.v1.OneInchSwapPayload
 */
export class OneInchSwapPayload extends Message<OneInchSwapPayload> {
  /**
   * @generated from field: vultisig.keysign.v1.Coin from_coin = 1;
   */
  fromCoin?: Coin;

  /**
   * @generated from field: vultisig.keysign.v1.Coin to_coin = 2;
   */
  toCoin?: Coin;

  /**
   * @generated from field: string from_amount = 3;
   */
  fromAmount = '';

  /**
   * @generated from field: string to_amount_decimal = 4;
   */
  toAmountDecimal = '';

  /**
   * @generated from field: vultisig.keysign.v1.OneInchQuote quote = 5;
   */
  quote?: OneInchQuote;

  constructor(data?: PartialMessage<OneInchSwapPayload>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'vultisig.keysign.v1.OneInchSwapPayload';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'from_coin', kind: 'message', T: Coin },
    { no: 2, name: 'to_coin', kind: 'message', T: Coin },
    {
      no: 3,
      name: 'from_amount',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
    },
    {
      no: 4,
      name: 'to_amount_decimal',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
    },
    { no: 5, name: 'quote', kind: 'message', T: OneInchQuote },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): OneInchSwapPayload {
    return new OneInchSwapPayload().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): OneInchSwapPayload {
    return new OneInchSwapPayload().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): OneInchSwapPayload {
    return new OneInchSwapPayload().fromJsonString(jsonString, options);
  }

  static equals(
    a: OneInchSwapPayload | PlainMessage<OneInchSwapPayload> | undefined,
    b: OneInchSwapPayload | PlainMessage<OneInchSwapPayload> | undefined
  ): boolean {
    return proto3.util.equals(OneInchSwapPayload, a, b);
  }
}
