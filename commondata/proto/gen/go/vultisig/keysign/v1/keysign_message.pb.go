// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: vultisig/keysign/v1/keysign_message.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type KeysignMessage struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	SessionId            string                 `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	ServiceName          string                 `protobuf:"bytes,2,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	EncryptionKeyHex     string                 `protobuf:"bytes,4,opt,name=encryption_key_hex,json=encryptionKeyHex,proto3" json:"encryption_key_hex,omitempty"`
	KeysignPayload       *KeysignPayload        `protobuf:"bytes,5,opt,name=keysign_payload,json=keysignPayload,proto3" json:"keysign_payload,omitempty"`
	UseVultisigRelay     bool                   `protobuf:"varint,6,opt,name=use_vultisig_relay,json=useVultisigRelay,proto3" json:"use_vultisig_relay,omitempty"`
	PayloadId            string                 `protobuf:"bytes,7,opt,name=payload_id,json=payloadId,proto3" json:"payload_id,omitempty"`
	CustomMessagePayload *CustomMessagePayload  `protobuf:"bytes,8,opt,name=custom_message_payload,json=customMessagePayload,proto3,oneof" json:"custom_message_payload,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *KeysignMessage) Reset() {
	*x = KeysignMessage{}
	mi := &file_vultisig_keysign_v1_keysign_message_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeysignMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeysignMessage) ProtoMessage() {}

func (x *KeysignMessage) ProtoReflect() protoreflect.Message {
	mi := &file_vultisig_keysign_v1_keysign_message_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeysignMessage.ProtoReflect.Descriptor instead.
func (*KeysignMessage) Descriptor() ([]byte, []int) {
	return file_vultisig_keysign_v1_keysign_message_proto_rawDescGZIP(), []int{0}
}

func (x *KeysignMessage) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *KeysignMessage) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *KeysignMessage) GetEncryptionKeyHex() string {
	if x != nil {
		return x.EncryptionKeyHex
	}
	return ""
}

func (x *KeysignMessage) GetKeysignPayload() *KeysignPayload {
	if x != nil {
		return x.KeysignPayload
	}
	return nil
}

func (x *KeysignMessage) GetUseVultisigRelay() bool {
	if x != nil {
		return x.UseVultisigRelay
	}
	return false
}

func (x *KeysignMessage) GetPayloadId() string {
	if x != nil {
		return x.PayloadId
	}
	return ""
}

func (x *KeysignMessage) GetCustomMessagePayload() *CustomMessagePayload {
	if x != nil {
		return x.CustomMessagePayload
	}
	return nil
}

type KeysignPayload struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	Coin      *Coin                  `protobuf:"bytes,1,opt,name=coin,proto3" json:"coin,omitempty"`
	ToAddress string                 `protobuf:"bytes,2,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty"`
	ToAmount  string                 `protobuf:"bytes,3,opt,name=to_amount,json=toAmount,proto3" json:"to_amount,omitempty"`
	// Types that are valid to be assigned to BlockchainSpecific:
	//
	//	*KeysignPayload_UtxoSpecific
	//	*KeysignPayload_EthereumSpecific
	//	*KeysignPayload_ThorchainSpecific
	//	*KeysignPayload_MayaSpecific
	//	*KeysignPayload_CosmosSpecific
	//	*KeysignPayload_SolanaSpecific
	//	*KeysignPayload_PolkadotSpecific
	//	*KeysignPayload_SuicheSpecific
	//	*KeysignPayload_TonSpecific
	//	*KeysignPayload_RippleSpecific
	//	*KeysignPayload_TronSpecific
	//	*KeysignPayload_Cardano
	BlockchainSpecific isKeysignPayload_BlockchainSpecific `protobuf_oneof:"blockchain_specific"`
	UtxoInfo           []*UtxoInfo                         `protobuf:"bytes,20,rep,name=utxo_info,json=utxoInfo,proto3" json:"utxo_info,omitempty"`
	Memo               *string                             `protobuf:"bytes,21,opt,name=memo,proto3,oneof" json:"memo,omitempty"`
	// Types that are valid to be assigned to SwapPayload:
	//
	//	*KeysignPayload_ThorchainSwapPayload
	//	*KeysignPayload_MayachainSwapPayload
	//	*KeysignPayload_OneinchSwapPayload
	//	*KeysignPayload_KyberswapSwapPayload
	SwapPayload         isKeysignPayload_SwapPayload `protobuf_oneof:"swap_payload"`
	Erc20ApprovePayload *Erc20ApprovePayload         `protobuf:"bytes,30,opt,name=erc20_approve_payload,json=erc20ApprovePayload,proto3,oneof" json:"erc20_approve_payload,omitempty"`
	VaultPublicKeyEcdsa string                       `protobuf:"bytes,31,opt,name=vault_public_key_ecdsa,json=vaultPublicKeyEcdsa,proto3" json:"vault_public_key_ecdsa,omitempty"`
	VaultLocalPartyId   string                       `protobuf:"bytes,32,opt,name=vault_local_party_id,json=vaultLocalPartyId,proto3" json:"vault_local_party_id,omitempty"`
	LibType             string                       `protobuf:"bytes,33,opt,name=lib_type,json=libType,proto3" json:"lib_type,omitempty"`
	SkipBroadcast       *bool                        `protobuf:"varint,34,opt,name=skip_broadcast,json=skipBroadcast,proto3,oneof" json:"skip_broadcast,omitempty"`
	// Types that are valid to be assigned to ContractPayload:
	//
	//	*KeysignPayload_WasmExecuteContractPayload
	ContractPayload isKeysignPayload_ContractPayload `protobuf_oneof:"contract_payload"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *KeysignPayload) Reset() {
	*x = KeysignPayload{}
	mi := &file_vultisig_keysign_v1_keysign_message_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeysignPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeysignPayload) ProtoMessage() {}

func (x *KeysignPayload) ProtoReflect() protoreflect.Message {
	mi := &file_vultisig_keysign_v1_keysign_message_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeysignPayload.ProtoReflect.Descriptor instead.
func (*KeysignPayload) Descriptor() ([]byte, []int) {
	return file_vultisig_keysign_v1_keysign_message_proto_rawDescGZIP(), []int{1}
}

func (x *KeysignPayload) GetCoin() *Coin {
	if x != nil {
		return x.Coin
	}
	return nil
}

func (x *KeysignPayload) GetToAddress() string {
	if x != nil {
		return x.ToAddress
	}
	return ""
}

func (x *KeysignPayload) GetToAmount() string {
	if x != nil {
		return x.ToAmount
	}
	return ""
}

func (x *KeysignPayload) GetBlockchainSpecific() isKeysignPayload_BlockchainSpecific {
	if x != nil {
		return x.BlockchainSpecific
	}
	return nil
}

func (x *KeysignPayload) GetUtxoSpecific() *UTXOSpecific {
	if x != nil {
		if x, ok := x.BlockchainSpecific.(*KeysignPayload_UtxoSpecific); ok {
			return x.UtxoSpecific
		}
	}
	return nil
}

func (x *KeysignPayload) GetEthereumSpecific() *EthereumSpecific {
	if x != nil {
		if x, ok := x.BlockchainSpecific.(*KeysignPayload_EthereumSpecific); ok {
			return x.EthereumSpecific
		}
	}
	return nil
}

func (x *KeysignPayload) GetThorchainSpecific() *THORChainSpecific {
	if x != nil {
		if x, ok := x.BlockchainSpecific.(*KeysignPayload_ThorchainSpecific); ok {
			return x.ThorchainSpecific
		}
	}
	return nil
}

func (x *KeysignPayload) GetMayaSpecific() *MAYAChainSpecific {
	if x != nil {
		if x, ok := x.BlockchainSpecific.(*KeysignPayload_MayaSpecific); ok {
			return x.MayaSpecific
		}
	}
	return nil
}

func (x *KeysignPayload) GetCosmosSpecific() *CosmosSpecific {
	if x != nil {
		if x, ok := x.BlockchainSpecific.(*KeysignPayload_CosmosSpecific); ok {
			return x.CosmosSpecific
		}
	}
	return nil
}

func (x *KeysignPayload) GetSolanaSpecific() *SolanaSpecific {
	if x != nil {
		if x, ok := x.BlockchainSpecific.(*KeysignPayload_SolanaSpecific); ok {
			return x.SolanaSpecific
		}
	}
	return nil
}

func (x *KeysignPayload) GetPolkadotSpecific() *PolkadotSpecific {
	if x != nil {
		if x, ok := x.BlockchainSpecific.(*KeysignPayload_PolkadotSpecific); ok {
			return x.PolkadotSpecific
		}
	}
	return nil
}

func (x *KeysignPayload) GetSuicheSpecific() *SuiSpecific {
	if x != nil {
		if x, ok := x.BlockchainSpecific.(*KeysignPayload_SuicheSpecific); ok {
			return x.SuicheSpecific
		}
	}
	return nil
}

func (x *KeysignPayload) GetTonSpecific() *TonSpecific {
	if x != nil {
		if x, ok := x.BlockchainSpecific.(*KeysignPayload_TonSpecific); ok {
			return x.TonSpecific
		}
	}
	return nil
}

func (x *KeysignPayload) GetRippleSpecific() *RippleSpecific {
	if x != nil {
		if x, ok := x.BlockchainSpecific.(*KeysignPayload_RippleSpecific); ok {
			return x.RippleSpecific
		}
	}
	return nil
}

func (x *KeysignPayload) GetTronSpecific() *TronSpecific {
	if x != nil {
		if x, ok := x.BlockchainSpecific.(*KeysignPayload_TronSpecific); ok {
			return x.TronSpecific
		}
	}
	return nil
}

func (x *KeysignPayload) GetCardano() *CardanoChainSpecific {
	if x != nil {
		if x, ok := x.BlockchainSpecific.(*KeysignPayload_Cardano); ok {
			return x.Cardano
		}
	}
	return nil
}

func (x *KeysignPayload) GetUtxoInfo() []*UtxoInfo {
	if x != nil {
		return x.UtxoInfo
	}
	return nil
}

func (x *KeysignPayload) GetMemo() string {
	if x != nil && x.Memo != nil {
		return *x.Memo
	}
	return ""
}

func (x *KeysignPayload) GetSwapPayload() isKeysignPayload_SwapPayload {
	if x != nil {
		return x.SwapPayload
	}
	return nil
}

func (x *KeysignPayload) GetThorchainSwapPayload() *THORChainSwapPayload {
	if x != nil {
		if x, ok := x.SwapPayload.(*KeysignPayload_ThorchainSwapPayload); ok {
			return x.ThorchainSwapPayload
		}
	}
	return nil
}

func (x *KeysignPayload) GetMayachainSwapPayload() *THORChainSwapPayload {
	if x != nil {
		if x, ok := x.SwapPayload.(*KeysignPayload_MayachainSwapPayload); ok {
			return x.MayachainSwapPayload
		}
	}
	return nil
}

func (x *KeysignPayload) GetOneinchSwapPayload() *OneInchSwapPayload {
	if x != nil {
		if x, ok := x.SwapPayload.(*KeysignPayload_OneinchSwapPayload); ok {
			return x.OneinchSwapPayload
		}
	}
	return nil
}

func (x *KeysignPayload) GetKyberswapSwapPayload() *KyberSwapPayload {
	if x != nil {
		if x, ok := x.SwapPayload.(*KeysignPayload_KyberswapSwapPayload); ok {
			return x.KyberswapSwapPayload
		}
	}
	return nil
}

func (x *KeysignPayload) GetErc20ApprovePayload() *Erc20ApprovePayload {
	if x != nil {
		return x.Erc20ApprovePayload
	}
	return nil
}

func (x *KeysignPayload) GetVaultPublicKeyEcdsa() string {
	if x != nil {
		return x.VaultPublicKeyEcdsa
	}
	return ""
}

func (x *KeysignPayload) GetVaultLocalPartyId() string {
	if x != nil {
		return x.VaultLocalPartyId
	}
	return ""
}

func (x *KeysignPayload) GetLibType() string {
	if x != nil {
		return x.LibType
	}
	return ""
}

func (x *KeysignPayload) GetSkipBroadcast() bool {
	if x != nil && x.SkipBroadcast != nil {
		return *x.SkipBroadcast
	}
	return false
}

func (x *KeysignPayload) GetContractPayload() isKeysignPayload_ContractPayload {
	if x != nil {
		return x.ContractPayload
	}
	return nil
}

func (x *KeysignPayload) GetWasmExecuteContractPayload() *WasmExecuteContractPayload {
	if x != nil {
		if x, ok := x.ContractPayload.(*KeysignPayload_WasmExecuteContractPayload); ok {
			return x.WasmExecuteContractPayload
		}
	}
	return nil
}

type isKeysignPayload_BlockchainSpecific interface {
	isKeysignPayload_BlockchainSpecific()
}

type KeysignPayload_UtxoSpecific struct {
	UtxoSpecific *UTXOSpecific `protobuf:"bytes,4,opt,name=utxo_specific,json=utxoSpecific,proto3,oneof"`
}

type KeysignPayload_EthereumSpecific struct {
	EthereumSpecific *EthereumSpecific `protobuf:"bytes,5,opt,name=ethereum_specific,json=ethereumSpecific,proto3,oneof"`
}

type KeysignPayload_ThorchainSpecific struct {
	ThorchainSpecific *THORChainSpecific `protobuf:"bytes,6,opt,name=thorchain_specific,json=thorchainSpecific,proto3,oneof"`
}

type KeysignPayload_MayaSpecific struct {
	MayaSpecific *MAYAChainSpecific `protobuf:"bytes,7,opt,name=maya_specific,json=mayaSpecific,proto3,oneof"`
}

type KeysignPayload_CosmosSpecific struct {
	CosmosSpecific *CosmosSpecific `protobuf:"bytes,8,opt,name=cosmos_specific,json=cosmosSpecific,proto3,oneof"`
}

type KeysignPayload_SolanaSpecific struct {
	SolanaSpecific *SolanaSpecific `protobuf:"bytes,9,opt,name=solana_specific,json=solanaSpecific,proto3,oneof"`
}

type KeysignPayload_PolkadotSpecific struct {
	PolkadotSpecific *PolkadotSpecific `protobuf:"bytes,10,opt,name=polkadot_specific,json=polkadotSpecific,proto3,oneof"`
}

type KeysignPayload_SuicheSpecific struct {
	SuicheSpecific *SuiSpecific `protobuf:"bytes,11,opt,name=suiche_specific,json=suicheSpecific,proto3,oneof"`
}

type KeysignPayload_TonSpecific struct {
	TonSpecific *TonSpecific `protobuf:"bytes,12,opt,name=ton_specific,json=tonSpecific,proto3,oneof"`
}

type KeysignPayload_RippleSpecific struct {
	RippleSpecific *RippleSpecific `protobuf:"bytes,13,opt,name=ripple_specific,json=rippleSpecific,proto3,oneof"`
}

type KeysignPayload_TronSpecific struct {
	TronSpecific *TronSpecific `protobuf:"bytes,14,opt,name=tron_specific,json=tronSpecific,proto3,oneof"`
}

type KeysignPayload_Cardano struct {
	Cardano *CardanoChainSpecific `protobuf:"bytes,15,opt,name=cardano,proto3,oneof"`
}

func (*KeysignPayload_UtxoSpecific) isKeysignPayload_BlockchainSpecific() {}

func (*KeysignPayload_EthereumSpecific) isKeysignPayload_BlockchainSpecific() {}

func (*KeysignPayload_ThorchainSpecific) isKeysignPayload_BlockchainSpecific() {}

func (*KeysignPayload_MayaSpecific) isKeysignPayload_BlockchainSpecific() {}

func (*KeysignPayload_CosmosSpecific) isKeysignPayload_BlockchainSpecific() {}

func (*KeysignPayload_SolanaSpecific) isKeysignPayload_BlockchainSpecific() {}

func (*KeysignPayload_PolkadotSpecific) isKeysignPayload_BlockchainSpecific() {}

func (*KeysignPayload_SuicheSpecific) isKeysignPayload_BlockchainSpecific() {}

func (*KeysignPayload_TonSpecific) isKeysignPayload_BlockchainSpecific() {}

func (*KeysignPayload_RippleSpecific) isKeysignPayload_BlockchainSpecific() {}

func (*KeysignPayload_TronSpecific) isKeysignPayload_BlockchainSpecific() {}

func (*KeysignPayload_Cardano) isKeysignPayload_BlockchainSpecific() {}

type isKeysignPayload_SwapPayload interface {
	isKeysignPayload_SwapPayload()
}

type KeysignPayload_ThorchainSwapPayload struct {
	ThorchainSwapPayload *THORChainSwapPayload `protobuf:"bytes,22,opt,name=thorchain_swap_payload,json=thorchainSwapPayload,proto3,oneof"`
}

type KeysignPayload_MayachainSwapPayload struct {
	MayachainSwapPayload *THORChainSwapPayload `protobuf:"bytes,23,opt,name=mayachain_swap_payload,json=mayachainSwapPayload,proto3,oneof"`
}

type KeysignPayload_OneinchSwapPayload struct {
	OneinchSwapPayload *OneInchSwapPayload `protobuf:"bytes,24,opt,name=oneinch_swap_payload,json=oneinchSwapPayload,proto3,oneof"`
}

type KeysignPayload_KyberswapSwapPayload struct {
	KyberswapSwapPayload *KyberSwapPayload `protobuf:"bytes,25,opt,name=kyberswap_swap_payload,json=kyberswapSwapPayload,proto3,oneof"`
}

func (*KeysignPayload_ThorchainSwapPayload) isKeysignPayload_SwapPayload() {}

func (*KeysignPayload_MayachainSwapPayload) isKeysignPayload_SwapPayload() {}

func (*KeysignPayload_OneinchSwapPayload) isKeysignPayload_SwapPayload() {}

func (*KeysignPayload_KyberswapSwapPayload) isKeysignPayload_SwapPayload() {}

type isKeysignPayload_ContractPayload interface {
	isKeysignPayload_ContractPayload()
}

type KeysignPayload_WasmExecuteContractPayload struct {
	WasmExecuteContractPayload *WasmExecuteContractPayload `protobuf:"bytes,35,opt,name=wasm_execute_contract_payload,json=wasmExecuteContractPayload,proto3,oneof"`
}

func (*KeysignPayload_WasmExecuteContractPayload) isKeysignPayload_ContractPayload() {}

var File_vultisig_keysign_v1_keysign_message_proto protoreflect.FileDescriptor

const file_vultisig_keysign_v1_keysign_message_proto_rawDesc = "" +
	"\n" +
	")vultisig/keysign/v1/keysign_message.proto\x12\x13vultisig.keysign.v1\x1a,vultisig/keysign/v1/1inch_swap_payload.proto\x1a-vultisig/keysign/v1/blockchain_specific.proto\x1a\x1evultisig/keysign/v1/coin.proto\x1a0vultisig/keysign/v1/custom_message_payload.proto\x1a/vultisig/keysign/v1/erc20_approve_payload.proto\x1a0vultisig/keysign/v1/kyberswap_swap_payload.proto\x1a0vultisig/keysign/v1/thorchain_swap_payload.proto\x1a#vultisig/keysign/v1/utxo_info.proto\x1a7vultisig/keysign/v1/wasm_execute_contract_payload.proto\"\x9c\x03\n" +
	"\x0eKeysignMessage\x12\x1d\n" +
	"\n" +
	"session_id\x18\x01 \x01(\tR\tsessionId\x12!\n" +
	"\fservice_name\x18\x02 \x01(\tR\vserviceName\x12,\n" +
	"\x12encryption_key_hex\x18\x04 \x01(\tR\x10encryptionKeyHex\x12L\n" +
	"\x0fkeysign_payload\x18\x05 \x01(\v2#.vultisig.keysign.v1.KeysignPayloadR\x0ekeysignPayload\x12,\n" +
	"\x12use_vultisig_relay\x18\x06 \x01(\bR\x10useVultisigRelay\x12\x1d\n" +
	"\n" +
	"payload_id\x18\a \x01(\tR\tpayloadId\x12d\n" +
	"\x16custom_message_payload\x18\b \x01(\v2).vultisig.keysign.v1.CustomMessagePayloadH\x00R\x14customMessagePayload\x88\x01\x01B\x19\n" +
	"\x17_custom_message_payload\"\xfc\x0f\n" +
	"\x0eKeysignPayload\x12-\n" +
	"\x04coin\x18\x01 \x01(\v2\x19.vultisig.keysign.v1.CoinR\x04coin\x12\x1d\n" +
	"\n" +
	"to_address\x18\x02 \x01(\tR\ttoAddress\x12\x1b\n" +
	"\tto_amount\x18\x03 \x01(\tR\btoAmount\x12H\n" +
	"\rutxo_specific\x18\x04 \x01(\v2!.vultisig.keysign.v1.UTXOSpecificH\x00R\futxoSpecific\x12T\n" +
	"\x11ethereum_specific\x18\x05 \x01(\v2%.vultisig.keysign.v1.EthereumSpecificH\x00R\x10ethereumSpecific\x12W\n" +
	"\x12thorchain_specific\x18\x06 \x01(\v2&.vultisig.keysign.v1.THORChainSpecificH\x00R\x11thorchainSpecific\x12M\n" +
	"\rmaya_specific\x18\a \x01(\v2&.vultisig.keysign.v1.MAYAChainSpecificH\x00R\fmayaSpecific\x12N\n" +
	"\x0fcosmos_specific\x18\b \x01(\v2#.vultisig.keysign.v1.CosmosSpecificH\x00R\x0ecosmosSpecific\x12N\n" +
	"\x0fsolana_specific\x18\t \x01(\v2#.vultisig.keysign.v1.SolanaSpecificH\x00R\x0esolanaSpecific\x12T\n" +
	"\x11polkadot_specific\x18\n" +
	" \x01(\v2%.vultisig.keysign.v1.PolkadotSpecificH\x00R\x10polkadotSpecific\x12K\n" +
	"\x0fsuiche_specific\x18\v \x01(\v2 .vultisig.keysign.v1.SuiSpecificH\x00R\x0esuicheSpecific\x12E\n" +
	"\fton_specific\x18\f \x01(\v2 .vultisig.keysign.v1.TonSpecificH\x00R\vtonSpecific\x12N\n" +
	"\x0fripple_specific\x18\r \x01(\v2#.vultisig.keysign.v1.RippleSpecificH\x00R\x0erippleSpecific\x12H\n" +
	"\rtron_specific\x18\x0e \x01(\v2!.vultisig.keysign.v1.TronSpecificH\x00R\ftronSpecific\x12E\n" +
	"\acardano\x18\x0f \x01(\v2).vultisig.keysign.v1.CardanoChainSpecificH\x00R\acardano\x12:\n" +
	"\tutxo_info\x18\x14 \x03(\v2\x1d.vultisig.keysign.v1.UtxoInfoR\butxoInfo\x12\x17\n" +
	"\x04memo\x18\x15 \x01(\tH\x03R\x04memo\x88\x01\x01\x12a\n" +
	"\x16thorchain_swap_payload\x18\x16 \x01(\v2).vultisig.keysign.v1.THORChainSwapPayloadH\x01R\x14thorchainSwapPayload\x12a\n" +
	"\x16mayachain_swap_payload\x18\x17 \x01(\v2).vultisig.keysign.v1.THORChainSwapPayloadH\x01R\x14mayachainSwapPayload\x12[\n" +
	"\x14oneinch_swap_payload\x18\x18 \x01(\v2'.vultisig.keysign.v1.OneInchSwapPayloadH\x01R\x12oneinchSwapPayload\x12]\n" +
	"\x16kyberswap_swap_payload\x18\x19 \x01(\v2%.vultisig.keysign.v1.KyberSwapPayloadH\x01R\x14kyberswapSwapPayload\x12a\n" +
	"\x15erc20_approve_payload\x18\x1e \x01(\v2(.vultisig.keysign.v1.Erc20ApprovePayloadH\x04R\x13erc20ApprovePayload\x88\x01\x01\x123\n" +
	"\x16vault_public_key_ecdsa\x18\x1f \x01(\tR\x13vaultPublicKeyEcdsa\x12/\n" +
	"\x14vault_local_party_id\x18  \x01(\tR\x11vaultLocalPartyId\x12\x19\n" +
	"\blib_type\x18! \x01(\tR\alibType\x12*\n" +
	"\x0eskip_broadcast\x18\" \x01(\bH\x05R\rskipBroadcast\x88\x01\x01\x12t\n" +
	"\x1dwasm_execute_contract_payload\x18# \x01(\v2/.vultisig.keysign.v1.WasmExecuteContractPayloadH\x02R\x1awasmExecuteContractPayloadB\x15\n" +
	"\x13blockchain_specificB\x0e\n" +
	"\fswap_payloadB\x12\n" +
	"\x10contract_payloadB\a\n" +
	"\x05_memoB\x18\n" +
	"\x16_erc20_approve_payloadB\x11\n" +
	"\x0f_skip_broadcastBT\n" +
	"\x13vultisig.keysign.v1Z8github.com/vultisig/commondata/go/vultisig/keysign/v1;v1\xba\x02\x02VSb\x06proto3"

var (
	file_vultisig_keysign_v1_keysign_message_proto_rawDescOnce sync.Once
	file_vultisig_keysign_v1_keysign_message_proto_rawDescData []byte
)

func file_vultisig_keysign_v1_keysign_message_proto_rawDescGZIP() []byte {
	file_vultisig_keysign_v1_keysign_message_proto_rawDescOnce.Do(func() {
		file_vultisig_keysign_v1_keysign_message_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_vultisig_keysign_v1_keysign_message_proto_rawDesc), len(file_vultisig_keysign_v1_keysign_message_proto_rawDesc)))
	})
	return file_vultisig_keysign_v1_keysign_message_proto_rawDescData
}

var file_vultisig_keysign_v1_keysign_message_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_vultisig_keysign_v1_keysign_message_proto_goTypes = []any{
	(*KeysignMessage)(nil),             // 0: vultisig.keysign.v1.KeysignMessage
	(*KeysignPayload)(nil),             // 1: vultisig.keysign.v1.KeysignPayload
	(*CustomMessagePayload)(nil),       // 2: vultisig.keysign.v1.CustomMessagePayload
	(*Coin)(nil),                       // 3: vultisig.keysign.v1.Coin
	(*UTXOSpecific)(nil),               // 4: vultisig.keysign.v1.UTXOSpecific
	(*EthereumSpecific)(nil),           // 5: vultisig.keysign.v1.EthereumSpecific
	(*THORChainSpecific)(nil),          // 6: vultisig.keysign.v1.THORChainSpecific
	(*MAYAChainSpecific)(nil),          // 7: vultisig.keysign.v1.MAYAChainSpecific
	(*CosmosSpecific)(nil),             // 8: vultisig.keysign.v1.CosmosSpecific
	(*SolanaSpecific)(nil),             // 9: vultisig.keysign.v1.SolanaSpecific
	(*PolkadotSpecific)(nil),           // 10: vultisig.keysign.v1.PolkadotSpecific
	(*SuiSpecific)(nil),                // 11: vultisig.keysign.v1.SuiSpecific
	(*TonSpecific)(nil),                // 12: vultisig.keysign.v1.TonSpecific
	(*RippleSpecific)(nil),             // 13: vultisig.keysign.v1.RippleSpecific
	(*TronSpecific)(nil),               // 14: vultisig.keysign.v1.TronSpecific
	(*CardanoChainSpecific)(nil),       // 15: vultisig.keysign.v1.CardanoChainSpecific
	(*UtxoInfo)(nil),                   // 16: vultisig.keysign.v1.UtxoInfo
	(*THORChainSwapPayload)(nil),       // 17: vultisig.keysign.v1.THORChainSwapPayload
	(*OneInchSwapPayload)(nil),         // 18: vultisig.keysign.v1.OneInchSwapPayload
	(*KyberSwapPayload)(nil),           // 19: vultisig.keysign.v1.KyberSwapPayload
	(*Erc20ApprovePayload)(nil),        // 20: vultisig.keysign.v1.Erc20ApprovePayload
	(*WasmExecuteContractPayload)(nil), // 21: vultisig.keysign.v1.WasmExecuteContractPayload
}
var file_vultisig_keysign_v1_keysign_message_proto_depIdxs = []int32{
	1,  // 0: vultisig.keysign.v1.KeysignMessage.keysign_payload:type_name -> vultisig.keysign.v1.KeysignPayload
	2,  // 1: vultisig.keysign.v1.KeysignMessage.custom_message_payload:type_name -> vultisig.keysign.v1.CustomMessagePayload
	3,  // 2: vultisig.keysign.v1.KeysignPayload.coin:type_name -> vultisig.keysign.v1.Coin
	4,  // 3: vultisig.keysign.v1.KeysignPayload.utxo_specific:type_name -> vultisig.keysign.v1.UTXOSpecific
	5,  // 4: vultisig.keysign.v1.KeysignPayload.ethereum_specific:type_name -> vultisig.keysign.v1.EthereumSpecific
	6,  // 5: vultisig.keysign.v1.KeysignPayload.thorchain_specific:type_name -> vultisig.keysign.v1.THORChainSpecific
	7,  // 6: vultisig.keysign.v1.KeysignPayload.maya_specific:type_name -> vultisig.keysign.v1.MAYAChainSpecific
	8,  // 7: vultisig.keysign.v1.KeysignPayload.cosmos_specific:type_name -> vultisig.keysign.v1.CosmosSpecific
	9,  // 8: vultisig.keysign.v1.KeysignPayload.solana_specific:type_name -> vultisig.keysign.v1.SolanaSpecific
	10, // 9: vultisig.keysign.v1.KeysignPayload.polkadot_specific:type_name -> vultisig.keysign.v1.PolkadotSpecific
	11, // 10: vultisig.keysign.v1.KeysignPayload.suiche_specific:type_name -> vultisig.keysign.v1.SuiSpecific
	12, // 11: vultisig.keysign.v1.KeysignPayload.ton_specific:type_name -> vultisig.keysign.v1.TonSpecific
	13, // 12: vultisig.keysign.v1.KeysignPayload.ripple_specific:type_name -> vultisig.keysign.v1.RippleSpecific
	14, // 13: vultisig.keysign.v1.KeysignPayload.tron_specific:type_name -> vultisig.keysign.v1.TronSpecific
	15, // 14: vultisig.keysign.v1.KeysignPayload.cardano:type_name -> vultisig.keysign.v1.CardanoChainSpecific
	16, // 15: vultisig.keysign.v1.KeysignPayload.utxo_info:type_name -> vultisig.keysign.v1.UtxoInfo
	17, // 16: vultisig.keysign.v1.KeysignPayload.thorchain_swap_payload:type_name -> vultisig.keysign.v1.THORChainSwapPayload
	17, // 17: vultisig.keysign.v1.KeysignPayload.mayachain_swap_payload:type_name -> vultisig.keysign.v1.THORChainSwapPayload
	18, // 18: vultisig.keysign.v1.KeysignPayload.oneinch_swap_payload:type_name -> vultisig.keysign.v1.OneInchSwapPayload
	19, // 19: vultisig.keysign.v1.KeysignPayload.kyberswap_swap_payload:type_name -> vultisig.keysign.v1.KyberSwapPayload
	20, // 20: vultisig.keysign.v1.KeysignPayload.erc20_approve_payload:type_name -> vultisig.keysign.v1.Erc20ApprovePayload
	21, // 21: vultisig.keysign.v1.KeysignPayload.wasm_execute_contract_payload:type_name -> vultisig.keysign.v1.WasmExecuteContractPayload
	22, // [22:22] is the sub-list for method output_type
	22, // [22:22] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_vultisig_keysign_v1_keysign_message_proto_init() }
func file_vultisig_keysign_v1_keysign_message_proto_init() {
	if File_vultisig_keysign_v1_keysign_message_proto != nil {
		return
	}
	file_vultisig_keysign_v1_1inch_swap_payload_proto_init()
	file_vultisig_keysign_v1_blockchain_specific_proto_init()
	file_vultisig_keysign_v1_coin_proto_init()
	file_vultisig_keysign_v1_custom_message_payload_proto_init()
	file_vultisig_keysign_v1_erc20_approve_payload_proto_init()
	file_vultisig_keysign_v1_kyberswap_swap_payload_proto_init()
	file_vultisig_keysign_v1_thorchain_swap_payload_proto_init()
	file_vultisig_keysign_v1_utxo_info_proto_init()
	file_vultisig_keysign_v1_wasm_execute_contract_payload_proto_init()
	file_vultisig_keysign_v1_keysign_message_proto_msgTypes[0].OneofWrappers = []any{}
	file_vultisig_keysign_v1_keysign_message_proto_msgTypes[1].OneofWrappers = []any{
		(*KeysignPayload_UtxoSpecific)(nil),
		(*KeysignPayload_EthereumSpecific)(nil),
		(*KeysignPayload_ThorchainSpecific)(nil),
		(*KeysignPayload_MayaSpecific)(nil),
		(*KeysignPayload_CosmosSpecific)(nil),
		(*KeysignPayload_SolanaSpecific)(nil),
		(*KeysignPayload_PolkadotSpecific)(nil),
		(*KeysignPayload_SuicheSpecific)(nil),
		(*KeysignPayload_TonSpecific)(nil),
		(*KeysignPayload_RippleSpecific)(nil),
		(*KeysignPayload_TronSpecific)(nil),
		(*KeysignPayload_Cardano)(nil),
		(*KeysignPayload_ThorchainSwapPayload)(nil),
		(*KeysignPayload_MayachainSwapPayload)(nil),
		(*KeysignPayload_OneinchSwapPayload)(nil),
		(*KeysignPayload_KyberswapSwapPayload)(nil),
		(*KeysignPayload_WasmExecuteContractPayload)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_vultisig_keysign_v1_keysign_message_proto_rawDesc), len(file_vultisig_keysign_v1_keysign_message_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_vultisig_keysign_v1_keysign_message_proto_goTypes,
		DependencyIndexes: file_vultisig_keysign_v1_keysign_message_proto_depIdxs,
		MessageInfos:      file_vultisig_keysign_v1_keysign_message_proto_msgTypes,
	}.Build()
	File_vultisig_keysign_v1_keysign_message_proto = out.File
	file_vultisig_keysign_v1_keysign_message_proto_goTypes = nil
	file_vultisig_keysign_v1_keysign_message_proto_depIdxs = nil
}
