---
globs: *.tsx
alwaysApply: false
---

# Readable Code Over Comments

## Principle

Write self-documenting, readable code instead of adding explanatory comments. Add comments only when absolutely necessary.

## When Comments Are Necessary

- Complex business logic that isn't obvious from the code
- Non-obvious algorithmic decisions or optimizations
- Public API documentation
- Temporary workarounds or TODOs with context
- Legal notices or license headers

## When Comments Are Unnecessary

- Explaining what the code does (code should be self-explanatory)
- Restating variable or function names
- Obvious operations or standard patterns
- Redundant information already clear from types

## Examples

<example>
```typescript
// Good: Self-documenting code
const isErc20Token = !isFeeCoin(coin)
const contractAddress = coin.id
const transferData = encodeErc20TransferData(toAddress, amount)
```
</example>

<example type="invalid">
```typescript
// Bad: Useless comments
// Check if the coin is an ERC20 token
const isErc20Token = !isFeeCoin(coin)
// Get the contract address
const contractAddress = coin.id
// Encode the transfer data
const transferData = encodeErc20TransferData(toAddress, amount)
```
</example>

<example>
```typescript
// Good: Comment for non-obvious business logic
// ERC20 transfers require 0 ETH value since payment is handled by the token contract
return {
  value: '0x0',
  data: encodeErc20TransferData(toAddress, amount)
}
```
</example>

## Guidelines

- Use descriptive variable and function names
- Extract complex logic into well-named functions
- Prefer clear code structure over explanatory comments
- Use TypeScript types to document interfaces and contracts

# Readable Code Over Comments

## Principle

Write self-documenting, readable code instead of adding explanatory comments. Add comments only when absolutely necessary.

## When Comments Are Necessary

- Complex business logic that isn't obvious from the code
- Non-obvious algorithmic decisions or optimizations
- Public API documentation
- Temporary workarounds or TODOs with context
- Legal notices or license headers

## When Comments Are Unnecessary

- Explaining what the code does (code should be self-explanatory)
- Restating variable or function names
- Obvious operations or standard patterns
- Redundant information already clear from types

## Examples

<example>
```typescript
// Good: Self-documenting code
const isErc20Token = !isFeeCoin(coin)
const contractAddress = coin.id
const transferData = encodeErc20TransferData(toAddress, amount)
```
</example>

<example type="invalid">
```typescript
// Bad: Useless comments
// Check if the coin is an ERC20 token
const isErc20Token = !isFeeCoin(coin)
// Get the contract address
const contractAddress = coin.id
// Encode the transfer data
const transferData = encodeErc20TransferData(toAddress, amount)
```
</example>

<example>
```typescript
// Good: Comment for non-obvious business logic
// ERC20 transfers require 0 ETH value since payment is handled by the token contract
return {
  value: '0x0',
  data: encodeErc20TransferData(toAddress, amount)
}
```
</example>

## Guidelines

- Use descriptive variable and function names
- Extract complex logic into well-named functions
- Prefer clear code structure over explanatory comments
- Use TypeScript types to document interfaces and contracts
