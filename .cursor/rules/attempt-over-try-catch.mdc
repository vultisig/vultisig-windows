---
description: USE attempt utility WHEN handling errors is necessary FOR user feedback or alternative logic, NOT for logging
globs: *.ts,*.tsx
alwaysApply: false
---

# Use attempt Utility Only When Error Handling is Necessary

## Context

- Applies when handling errors ONLY when you need to show them to users or execute different logic
- The codebase provides a utility function [attempt.ts](mdc:lib/utils/attempt.ts) from `@lib/utils/attempt`
- This utility provides a consistent way to handle errors with Result types
- Do NOT add error handling just to log errors - let errors bubble up naturally

## Requirements

- NEVER use try-catch blocks for error handling
- ONLY use `attempt` utility when you need to show errors to users or execute alternative logic
- Do NOT wrap functions in attempt just to log errors - let them throw naturally
- Use pattern matching with 'data' in result or 'error' in result for type-safe error handling
- Use `withFallback` when a default value is needed in case of error
- Only use try-finally when resource cleanup is needed (e.g., closing connections)

## Examples

<example>
// Good: Using attempt when showing error to user
import { attempt } from '@lib/utils/attempt'

const result = await attempt(async () => {
return await saveUserData(data)
})

if ('data' in result) {
showSuccessMessage('Data saved successfully')
} else {
showErrorToUser(`Failed to save: ${result.error.message}`)
}

// Good: Using attempt for alternative logic
const result = await attempt(() => fetchFromPrimaryAPI())
const data = 'data' in result
? result.data
: await fetchFromBackupAPI() // Different logic on failure

// Good: Using withFallback for default values
const userPreferences = withFallback(
attempt(() => parseStoredPreferences()),
DEFAULT_PREFERENCES
)
</example>

<example type="invalid">
// Bad: Using attempt just to log errors
const result = await attempt(() => trackAnalytics(event))
if ('error' in result) {
  console.error('Analytics failed:', result.error) // Just logging - unnecessary
}

// Bad: Let it throw naturally instead
await trackAnalytics(event) // If it fails, let the error bubble up

// Bad: Using try-catch for error handling
try {
const data = await fetchData()
processData(data)
} catch (error) {
logError(error) // Just logging - let it throw instead
}

// Bad: Wrapping everything in attempt unnecessarily
const result = await attempt(() => internalUtilityFunction())
if ('error' in result) {
console.error(result.error) // No user feedback or alternative logic
}
</example>

## When NOT to Use Error Handling

- Internal utility functions that should throw on failure
- Analytics, logging, or telemetry calls
- Operations where you don't need to show users specific error messages
- Functions where failure should stop execution (let them throw)

## Benefits

1. Cleaner code with less unnecessary error handling
2. Type-safe error handling only where needed
3. Natural error propagation for debugging
4. Better user experience with meaningful error messages
5. Alternative logic paths when primary operations fail
6. Consistent error handling patterns across the codebase
7. No need for type casting of errors
8. Better error propagation
9. Easier to test and maintain
10. Eliminates common try-catch pitfalls
